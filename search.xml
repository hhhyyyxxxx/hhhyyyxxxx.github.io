<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>index</title>
    <url>/2024/05/31/index/</url>
    <content><![CDATA[<p>welcome</p>
]]></content>
  </entry>
  <entry>
    <title>filesys</title>
    <url>/2024/06/01/os/</url>
    <content><![CDATA[<h1 id="Nachos文件系统实验笔记"><a href="#Nachos文件系统实验笔记" class="headerlink" title="Nachos文件系统实验笔记"></a>Nachos文件系统实验笔记</h1><p>修改文件</p>
<ul>
<li>build.linux <ul>
<li>makefile 删除 <code>-DFILESYS_STUB</code></li>
</ul>
</li>
</ul>
<h2 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h2><ol>
<li><p>修改<code>filehdr.h</code>：添加文件类型、最后访问时间属性；添加设置访问时间方法；</p>
</li>
<li><p>修改<code>Filehdr.cc</code>：添加头文件，修改<code>FileHeader::Print()</code>方法，实现<code>FileHeader::set_last_visit_time()</code>方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//add 5.31</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br></pre></td></tr></table></figure>


</li>
<li><p>修改<code>Filesys.cc</code> ：修改<code>FileSystem::Create()</code>方法。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">FileHeader::Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="type">int</span> i, j, k;</span><br><span class="line">    <span class="type">char</span> *data = <span class="keyword">new</span> <span class="type">char</span>[SectorSize];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;FileHeader contents.  File size: %d.  File blocks:\n&quot;</span>, numBytes);</span><br><span class="line">    <span class="comment">//add 5.31</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;type:%s\n&quot;</span>,type);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;last_visit_time:%s\n&quot;</span>,last_visit_time);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numSectors; i++)</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, dataSectors[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nFile contents:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = k = <span class="number">0</span>; i &lt; numSectors; i++) &#123;</span><br><span class="line">	kernel-&gt;synchDisk-&gt;<span class="built_in">ReadSector</span>(dataSectors[i], data);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; (j &lt; SectorSize) &amp;&amp; (k &lt; numBytes); j++, k++) &#123;</span><br><span class="line">	    <span class="keyword">if</span> (<span class="string">&#x27;\040&#x27;</span> &lt;= data[j] &amp;&amp; data[j] &lt;= <span class="string">&#x27;\176&#x27;</span>)   <span class="comment">// isprint(data[j])</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, data[j]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\\%x&quot;</span>, (<span class="type">unsigned</span> <span class="type">char</span>)data[j]);</span><br><span class="line">	&#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> [] data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//add 5.31</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FileHeader::set_last_visit_time</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">time_t</span> timep;</span><br><span class="line">    <span class="built_in">time</span>(&amp;timep);</span><br><span class="line">    <span class="built_in">strncpy</span>(last_visit_time,<span class="built_in">asctime</span>(<span class="built_in">gmtime</span>(&amp;timep)),<span class="number">25</span>);</span><br><span class="line">    last_visit_time[<span class="number">24</span>]=<span class="string">&quot;\0&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><ul>
<li><code>./nachos -f</code> 格式化文件系统</li>
<li><code>./nachos -cp [文件1] [文件2]</code> 复制文件1进入nachos文件系统</li>
<li><code>./nachos -l </code> 查看文件</li>
<li><code>./nachos -D</code> 查看文件系统信息</li>
<li>效果：<img src="https://gcore.jsdelivr.net/gh/CNhuazhu/TuChuang6/blog/Snipaste_2024-05-28_20-00-50.jpg"></li>
</ul>
<h2 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h2><ol>
<li><p>修改<code>filehdr.h</code>：定义常量</p>
<blockquote>
<p>修改dataSectors数组的大小，便于后续程序修改</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NUML1SECTOR 	((SectorSize - 2 * sizeof(int)) / sizeof(int))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUML2SECTOR 	NumL1sector*(SectorSize/ sizeof(int))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXFILESIZE NumL2sector*SectorSize</span></span><br><span class="line"><span class="comment">// #define NumDirect 	((SectorSize - 2 * sizeof(int)) / sizeof(int))</span></span><br><span class="line"><span class="comment">// #define MaxFileSize 	(NumDirect * SectorSize)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> L1SECTORSIZE (SectorSize / sizeof(int))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> L2SECTORSIZE 1</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/06/01/os/.%5Cimage%5Cfilesys2.png" alt="image-20240531114122271"></p>
</li>
<li><p>修改<code>filehdr.cc</code>：分别修改：</p>
<p><code>FileHeader::Allocate()</code>方法</p>
<blockquote>
<p>首先判断是否需要用到二级索引。若需要，则在直接索引的基础上添加dataSectors数组，指向bitmap的空扇区，并同步调用磁盘写扇区的方法WriteSector，将从bitmap中找出的直接节点指向的扇区编号写入当前二级节点指向的扇区。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span></span></span><br><span class="line"><span class="function"><span class="title">FileHeader::Allocate</span><span class="params">(PersistentBitmap *freeMap, <span class="type">int</span> fileSize)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"> numBytes = fileSize;</span><br><span class="line"> numSectors  = <span class="built_in">divRoundUp</span>(fileSize, SectorSize);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (freeMap-&gt;<span class="built_in">NumClear</span>() &lt; numSectors)</span><br><span class="line">	<span class="keyword">return</span> FALSE;		<span class="comment">// not enough space</span></span><br><span class="line"></span><br><span class="line"> <span class="type">int</span> leftSectors = numSectors;</span><br><span class="line"> <span class="type">int</span> L1SecNeed = <span class="built_in">divRoundUp</span>(fileSize,SectorSize);</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> L1=<span class="number">0</span>;L1&lt;L1SecNeed;L1++)&#123;</span><br><span class="line">     <span class="type">int</span> L2used = leftSectors&gt;L1SECTORSIZE?L1SECTORSIZE:leftSectors;</span><br><span class="line">     dataSectors[L1] = freeMap-&gt;<span class="built_in">FindAndSet</span>();</span><br><span class="line"></span><br><span class="line">     <span class="type">int</span> *index = <span class="keyword">new</span> <span class="type">int</span>[L2used];</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> L2 = <span class="number">0</span>;L2&lt;L2used;L2++)&#123;</span><br><span class="line">         index[L2] = freeMap-&gt;<span class="built_in">FindAndSet</span>();</span><br><span class="line">     &#125;</span><br><span class="line">     kernel-&gt;synchDisk-&gt;<span class="built_in">WriteSector</span>(dataSectors[L1],(<span class="type">char</span> *)index);</span><br><span class="line">     <span class="keyword">delete</span> index;</span><br><span class="line"></span><br><span class="line">     leftSectors -=L2used;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// if(numSectors &lt;=2)&#123;</span></span><br><span class="line"> <span class="comment">//     for (int i=0 ; i&lt;numSectors ; i++)</span></span><br><span class="line"> <span class="comment">//         dataSectorss[i] = freeMap-&gt;Find();</span></span><br><span class="line"> <span class="comment">// &#125;</span></span><br><span class="line"> <span class="comment">// else&#123;</span></span><br><span class="line"> <span class="comment">//     for(int i=0;i&lt;29;i++)</span></span><br><span class="line"> <span class="comment">//         dataSectors[i] = freeMap-&gt;Find();</span></span><br><span class="line"> <span class="comment">//     dataSectors[29] = freeMap-&gt;Find();</span></span><br><span class="line"> <span class="comment">//     int indirect_index[32];</span></span><br><span class="line"> <span class="comment">//     for(int i=0;i&lt;numSectors-29;i++)</span></span><br><span class="line"> <span class="comment">//         indirect_index[i]=freeMap-&gt;Find();</span></span><br><span class="line"> <span class="comment">//     SynchDisk-&gt;WriteSector(dataSectors[29],(char*)indirect_index);</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// for (int i = 0; i &lt; numSectors; i++) &#123;</span></span><br><span class="line">	<span class="comment">// dataSectors[i] = freeMap-&gt;FindAndSet();</span></span><br><span class="line">	<span class="comment">// // since we checked that there was enough free space,</span></span><br><span class="line">	<span class="comment">// // we expect this to succeed</span></span><br><span class="line">	<span class="comment">// ASSERT(dataSectors[i] &gt;= 0);</span></span><br><span class="line"> <span class="comment">// &#125;</span></span><br><span class="line"> <span class="comment">// return TRUE;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<p><code>FileHeader::Deallocate()</code>方法</p>
<blockquote>
<p>对于二级索引节点的回收需要先调用磁盘类的ReadSector方法，读出此二级索引节点指向的扇区后再回收。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> </span></span><br><span class="line"><span class="function"><span class="title">FileHeader::Deallocate</span><span class="params">(PersistentBitmap *freeMap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="comment">// for (int i = 0; i &lt; numSectors; i++) &#123;</span></span><br><span class="line">	<span class="comment">// ASSERT(freeMap-&gt;Test((int) dataSectors[i]));  // ought to be marked!</span></span><br><span class="line">	<span class="comment">// freeMap-&gt;Clear((int) dataSectors[i]);</span></span><br><span class="line"> <span class="comment">// &#125;</span></span><br><span class="line"> <span class="type">int</span> leftSectors = numSectors;</span><br><span class="line"></span><br><span class="line"> <span class="type">int</span> L1SecNeed = <span class="built_in">divRoundUp</span>(numSectors,L1SECTORSIZE);</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> L1=<span class="number">0</span>;L1&lt;L1SecNeed;L1++)&#123;</span><br><span class="line">     <span class="type">char</span> *temp = <span class="keyword">new</span> <span class="type">char</span>[SectorSize];</span><br><span class="line">     kernel-&gt;synchDisk-&gt;<span class="built_in">ReadSector</span>(dataSectors[L1],temp);</span><br><span class="line">     <span class="type">int</span> *result = (<span class="type">int</span> *)temp;</span><br><span class="line"></span><br><span class="line">     <span class="type">int</span> L2used = leftSectors &gt;L1SECTORSIZE ?L1SECTORSIZE:leftSectors;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> L2=<span class="number">0</span>;L2&lt;L2used;L2++)&#123;</span><br><span class="line">         <span class="built_in">ASSERT</span>(freeMap-&gt;<span class="built_in">Test</span>(result[L2]));</span><br><span class="line">         freeMap-&gt;<span class="built_in">Clear</span>(result[L2]);</span><br><span class="line">     &#125;</span><br><span class="line">     leftSectors -=L2used;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<p>&#96;&#96;FileHeader::ByteToSector()&#96;方法</p>
<blockquote>
<p>便于Openfile类的读写方法能够定位到正确的文件内容，根据传入的偏移量计算数据位于文件的第几号扇区，如果是二级索引节点中，则去除此二级索引指向的扇区，然后计算待取数据在这个扇区32个直接索引中哪一个指向的扇区中，最后返回目标扇区的编号。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">FileHeader::ByteToSector</span><span class="params">(<span class="type">int</span> offset)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="type">int</span> sector = offset / SectorSize;</span><br><span class="line"> <span class="type">int</span> L1Index = sector / L1SECTORSIZE;</span><br><span class="line"> <span class="type">int</span> L2Index = sector - L1Index * L1SECTORSIZE;</span><br><span class="line"></span><br><span class="line"> <span class="type">char</span> *temp = <span class="keyword">new</span> <span class="type">char</span>[SectorSize];</span><br><span class="line"> kernel-&gt;synchDisk-&gt;<span class="built_in">ReadSector</span>(dataSectors[L1Index],temp);</span><br><span class="line"> <span class="type">int</span> *L2Sec = (<span class="type">int</span> *)temp;</span><br><span class="line"> <span class="type">int</span> ret = L2Sec[L2Index];</span><br><span class="line"> <span class="keyword">delete</span> temp;</span><br><span class="line"> <span class="keyword">return</span> ret;</span><br><span class="line"><span class="comment">// return(dataSectors[offset / SectorSize]);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<p>FileHeader::Print()&#96;方法</p>
<blockquote>
<p>显示详细的文件头信息以及扇区分配，二级索引和一级索引的调用情况等。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">FileHeader::Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="type">int</span> numL1Sec = <span class="built_in">divRoundUp</span>(numSectors,L1SECTORSIZE);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;文件类型:%s\n&quot;</span>,type);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;创建时间:%s\n&quot;</span>,last_visit_time);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;文件大小:%d Byte\n&quot;</span>,numBytes);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;扇区数量: 1 + %d +%d = %d Sectors\n&quot;</span>,numL1Sec,numSectors,numL1Sec+numSectors+<span class="number">1</span>);</span><br><span class="line"> <span class="type">int</span> leftSectors = numSectors;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;所有的二级索引指向的扇区:&quot;</span>);</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> L1=<span class="number">0</span>;L1&lt;numL1Sec;L1++)&#123;</span><br><span class="line">     <span class="type">char</span> *temp = <span class="keyword">new</span> <span class="type">char</span>[SectorSize];</span><br><span class="line">     kernel-&gt;synchDisk-&gt;<span class="built_in">ReadSector</span>(dataSectors[L1],temp);</span><br><span class="line">     <span class="type">int</span> *result = (<span class="type">int</span> *)temp;</span><br><span class="line"></span><br><span class="line">     <span class="type">int</span> L2used = leftSectors &gt;L1SECTORSIZE ?L1SECTORSIZE:leftSectors;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> L2=<span class="number">0</span>;L2&lt;L2used;L2++)&#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,result[L2]);</span><br><span class="line">     &#125;</span><br><span class="line">     leftSectors -=L2used;</span><br><span class="line">     <span class="keyword">delete</span> temp;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// int i, j, k;</span></span><br><span class="line"> <span class="comment">// char *data = new char[SectorSize];</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// printf(&quot;FileHeader contents.  File size: %d.  File blocks:\n&quot;, numBytes);</span></span><br><span class="line"> <span class="comment">// //add 5.31</span></span><br><span class="line"> <span class="comment">// printf(&quot;type:%s\n&quot;,type);</span></span><br><span class="line"> <span class="comment">// printf(&quot;last_visit_time:%s\n&quot;,last_visit_time);</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// for (i = 0; i &lt; numSectors; i++)</span></span><br><span class="line">	<span class="comment">// printf(&quot;%d &quot;, dataSectors[i]);</span></span><br><span class="line"> <span class="comment">// printf(&quot;\nFile contents:\n&quot;);</span></span><br><span class="line"> <span class="comment">// for (i = k = 0; i &lt; numSectors; i++) &#123;</span></span><br><span class="line">	<span class="comment">// kernel-&gt;synchDisk-&gt;ReadSector(dataSectors[i], data);</span></span><br><span class="line"> <span class="comment">//     for (j = 0; (j &lt; SectorSize) &amp;&amp; (k &lt; numBytes); j++, k++) &#123;</span></span><br><span class="line">	<span class="comment">//     if (&#x27;\040&#x27; &lt;= data[j] &amp;&amp; data[j] &lt;= &#x27;\176&#x27;)   // isprint(data[j])</span></span><br><span class="line">	<span class="comment">// 	printf(&quot;%c&quot;, data[j]);</span></span><br><span class="line"> <span class="comment">//         else</span></span><br><span class="line">	<span class="comment">// 	printf(&quot;\\%x&quot;, (unsigned char)data[j]);</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line"> <span class="comment">//     printf(&quot;\n&quot;); </span></span><br><span class="line"> <span class="comment">// &#125;</span></span><br><span class="line"> <span class="comment">// delete [] data;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/06/01/os/filesys1.png" alt="image-20240531113413449"></p>
</blockquote>
<p><code>FileHeader::DebugDataSectors()</code>方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">FileHeader::DebugDataSectors</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;numBytes: %d\n&quot;</span>,numBytes);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;numSectors: %d\n&quot;</span>,numSectors);</span><br><span class="line">    <span class="type">int</span> numL1Sec = <span class="built_in">divRoundUp</span>(numSectors,L1SECTORSIZE);</span><br><span class="line">    <span class="type">int</span> leftSectors = numSectors;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> L1=<span class="number">0</span>;L1&lt;numL1Sec;L1++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;L1 index %d points to:\n&quot;</span>,L1);</span><br><span class="line">        <span class="type">char</span> *temp = <span class="keyword">new</span> <span class="type">char</span>[SectorSize];</span><br><span class="line">        kernel-&gt;synchDisk-&gt;<span class="built_in">ReadSector</span>(dataSectors[L1],temp);</span><br><span class="line">        <span class="type">int</span> *result = (<span class="type">int</span> *)temp;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> L2used = leftSectors &gt;L1SECTORSIZE ?L1SECTORSIZE:leftSectors;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> L2=<span class="number">0</span>;L2&lt;L2used;L2++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,result[L2]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        leftSectors -=L2used;</span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h3><ul>
<li><code>./nachos -f</code> 格式化文件系统</li>
<li>创建一个大于4K的文件（任意文件）： <code>dd if=/dev/zero of=lab12_5k count=5 bs=1024</code></li>
<li>利用<code>./nachos -cp</code>命令将其复制到nachos文件系统</li>
<li><code>./nachos -l </code> 查看文件</li>
<li><code>./nachos -D</code> 查看文件系统信息</li>
<li>效果：<img src="https://gcore.jsdelivr.net/gh/CNhuazhu/TuChuang6/blog/Snipaste_2024-05-28_20-05-46.jpg"></li>
</ul>
<hr>
<p>实验相关命令小结：</p>
<ul>
<li><code>./nachos -f</code> 格式化文件系统</li>
<li><code>./nachos -D</code> 查看文件系统信息</li>
<li><code>./nachos -l </code> 查看文件</li>
<li><code>./nachos -cp origin.txt nachos.txt</code> 复制文件进入nachos文件系统</li>
</ul>
]]></content>
      <tags>
        <tag>os</tag>
      </tags>
  </entry>
</search>
